
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Place
 * 
 */
export type Place = $Result.DefaultSelection<Prisma.$PlacePayload>
/**
 * Model Coord
 * 
 */
export type Coord = $Result.DefaultSelection<Prisma.$CoordPayload>
/**
 * Model Point
 * 
 */
export type Point = $Result.DefaultSelection<Prisma.$PointPayload>
/**
 * Model Route
 * 
 */
export type Route = $Result.DefaultSelection<Prisma.$RoutePayload>
/**
 * Model RouteDriver
 * 
 */
export type RouteDriver = $Result.DefaultSelection<Prisma.$RouteDriverPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Routes
 * const routes = await prisma.route.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Routes
   * const routes = await prisma.route.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.route`: Exposes CRUD operations for the **Route** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routes
    * const routes = await prisma.route.findMany()
    * ```
    */
  get route(): Prisma.RouteDelegate<ExtArgs>;

  /**
   * `prisma.routeDriver`: Exposes CRUD operations for the **RouteDriver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RouteDrivers
    * const routeDrivers = await prisma.routeDriver.findMany()
    * ```
    */
  get routeDriver(): Prisma.RouteDriverDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Route: 'Route',
    RouteDriver: 'RouteDriver'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "route" | "routeDriver"
      txIsolationLevel: never
    }
    model: {
      Route: {
        payload: Prisma.$RoutePayload<ExtArgs>
        fields: Prisma.RouteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findFirst: {
            args: Prisma.RouteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          findMany: {
            args: Prisma.RouteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>[]
          }
          create: {
            args: Prisma.RouteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          createMany: {
            args: Prisma.RouteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RouteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          update: {
            args: Prisma.RouteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          deleteMany: {
            args: Prisma.RouteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RouteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoutePayload>
          }
          aggregate: {
            args: Prisma.RouteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoute>
          }
          groupBy: {
            args: Prisma.RouteGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RouteFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RouteAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RouteCountArgs<ExtArgs>
            result: $Utils.Optional<RouteCountAggregateOutputType> | number
          }
        }
      }
      RouteDriver: {
        payload: Prisma.$RouteDriverPayload<ExtArgs>
        fields: Prisma.RouteDriverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RouteDriverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RouteDriverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          findFirst: {
            args: Prisma.RouteDriverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RouteDriverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          findMany: {
            args: Prisma.RouteDriverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>[]
          }
          create: {
            args: Prisma.RouteDriverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          createMany: {
            args: Prisma.RouteDriverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RouteDriverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          update: {
            args: Prisma.RouteDriverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          deleteMany: {
            args: Prisma.RouteDriverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RouteDriverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RouteDriverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RouteDriverPayload>
          }
          aggregate: {
            args: Prisma.RouteDriverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRouteDriver>
          }
          groupBy: {
            args: Prisma.RouteDriverGroupByArgs<ExtArgs>
            result: $Utils.Optional<RouteDriverGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RouteDriverFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RouteDriverAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RouteDriverCountArgs<ExtArgs>
            result: $Utils.Optional<RouteDriverCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Place
   */





  export type PlaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    location?: boolean | CoordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["place"]>


  export type PlaceSelectScalar = {
    name?: boolean
  }

  export type PlaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlacePayload = {
    name: "Place"
    objects: {}
    scalars: {
      name: string
    }
    composites: {
      location: Prisma.$CoordPayload
    }
  }

  type PlaceGetPayload<S extends boolean | null | undefined | PlaceDefaultArgs> = $Result.GetResult<Prisma.$PlacePayload, S>





  /**
   * Fields of the Place model
   */ 
  interface PlaceFieldRefs {
    readonly name: FieldRef<"Place", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Place without action
   */
  export type PlaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Place
     */
    select?: PlaceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaceInclude<ExtArgs> | null
  }


  /**
   * Model Coord
   */





  export type CoordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lat?: boolean
    lng?: boolean
  }, ExtArgs["result"]["coord"]>


  export type CoordSelectScalar = {
    lat?: boolean
    lng?: boolean
  }


  export type $CoordPayload = {
    name: "Coord"
    objects: {}
    scalars: {
      lat: number
      lng: number
    }
    composites: {}
  }

  type CoordGetPayload<S extends boolean | null | undefined | CoordDefaultArgs> = $Result.GetResult<Prisma.$CoordPayload, S>





  /**
   * Fields of the Coord model
   */ 
  interface CoordFieldRefs {
    readonly lat: FieldRef<"Coord", 'Float'>
    readonly lng: FieldRef<"Coord", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Coord without action
   */
  export type CoordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coord
     */
    select?: CoordSelect<ExtArgs> | null
  }


  /**
   * Model Point
   */





  export type PointSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    location?: boolean | CoordDefaultArgs<ExtArgs>
    created_at?: boolean
  }, ExtArgs["result"]["point"]>


  export type PointSelectScalar = {
    created_at?: boolean
  }

  export type PointInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PointPayload = {
    name: "Point"
    objects: {}
    scalars: {
      created_at: Date
    }
    composites: {
      location: Prisma.$CoordPayload
    }
  }

  type PointGetPayload<S extends boolean | null | undefined | PointDefaultArgs> = $Result.GetResult<Prisma.$PointPayload, S>





  /**
   * Fields of the Point model
   */ 
  interface PointFieldRefs {
    readonly created_at: FieldRef<"Point", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Point without action
   */
  export type PointDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Point
     */
    select?: PointSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PointInclude<ExtArgs> | null
  }


  /**
   * Model Route
   */

  export type AggregateRoute = {
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  export type RouteAvgAggregateOutputType = {
    distance: number | null
    duration: number | null
  }

  export type RouteSumAggregateOutputType = {
    distance: number | null
    duration: number | null
  }

  export type RouteMinAggregateOutputType = {
    id: string | null
    name: string | null
    distance: number | null
    duration: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RouteMaxAggregateOutputType = {
    id: string | null
    name: string | null
    distance: number | null
    duration: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RouteCountAggregateOutputType = {
    id: number
    name: number
    distance: number
    duration: number
    directions: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type RouteAvgAggregateInputType = {
    distance?: true
    duration?: true
  }

  export type RouteSumAggregateInputType = {
    distance?: true
    duration?: true
  }

  export type RouteMinAggregateInputType = {
    id?: true
    name?: true
    distance?: true
    duration?: true
    created_at?: true
    updated_at?: true
  }

  export type RouteMaxAggregateInputType = {
    id?: true
    name?: true
    distance?: true
    duration?: true
    created_at?: true
    updated_at?: true
  }

  export type RouteCountAggregateInputType = {
    id?: true
    name?: true
    distance?: true
    duration?: true
    directions?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type RouteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Route to aggregate.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Routes
    **/
    _count?: true | RouteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RouteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RouteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteMaxAggregateInputType
  }

  export type GetRouteAggregateType<T extends RouteAggregateArgs> = {
        [P in keyof T & keyof AggregateRoute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoute[P]>
      : GetScalarType<T[P], AggregateRoute[P]>
  }




  export type RouteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteWhereInput
    orderBy?: RouteOrderByWithAggregationInput | RouteOrderByWithAggregationInput[]
    by: RouteScalarFieldEnum[] | RouteScalarFieldEnum
    having?: RouteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteCountAggregateInputType | true
    _avg?: RouteAvgAggregateInputType
    _sum?: RouteSumAggregateInputType
    _min?: RouteMinAggregateInputType
    _max?: RouteMaxAggregateInputType
  }

  export type RouteGroupByOutputType = {
    id: string
    name: string
    distance: number
    duration: number
    directions: JsonValue
    created_at: Date
    updated_at: Date
    _count: RouteCountAggregateOutputType | null
    _avg: RouteAvgAggregateOutputType | null
    _sum: RouteSumAggregateOutputType | null
    _min: RouteMinAggregateOutputType | null
    _max: RouteMaxAggregateOutputType | null
  }

  type GetRouteGroupByPayload<T extends RouteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteGroupByOutputType[P]>
            : GetScalarType<T[P], RouteGroupByOutputType[P]>
        }
      >
    >


  export type RouteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    source?: boolean | PlaceDefaultArgs<ExtArgs>
    destination?: boolean | PlaceDefaultArgs<ExtArgs>
    distance?: boolean
    duration?: boolean
    directions?: boolean
    created_at?: boolean
    updated_at?: boolean
    RouteDriver?: boolean | Route$RouteDriverArgs<ExtArgs>
  }, ExtArgs["result"]["route"]>


  export type RouteSelectScalar = {
    id?: boolean
    name?: boolean
    distance?: boolean
    duration?: boolean
    directions?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type RouteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RouteDriver?: boolean | Route$RouteDriverArgs<ExtArgs>
  }

  export type $RoutePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Route"
    objects: {
      RouteDriver: Prisma.$RouteDriverPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      distance: number
      duration: number
      directions: Prisma.JsonValue
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["route"]>
    composites: {
      source: Prisma.$PlacePayload
      destination: Prisma.$PlacePayload
    }
  }

  type RouteGetPayload<S extends boolean | null | undefined | RouteDefaultArgs> = $Result.GetResult<Prisma.$RoutePayload, S>

  type RouteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RouteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RouteCountAggregateInputType | true
    }

  export interface RouteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Route'], meta: { name: 'Route' } }
    /**
     * Find zero or one Route that matches the filter.
     * @param {RouteFindUniqueArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteFindUniqueArgs>(args: SelectSubset<T, RouteFindUniqueArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Route that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RouteFindUniqueOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Route that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteFindFirstArgs>(args?: SelectSubset<T, RouteFindFirstArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Route that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindFirstOrThrowArgs} args - Arguments to find a Route
     * @example
     * // Get one Route
     * const route = await prisma.route.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Routes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routes
     * const routes = await prisma.route.findMany()
     * 
     * // Get first 10 Routes
     * const routes = await prisma.route.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeWithIdOnly = await prisma.route.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteFindManyArgs>(args?: SelectSubset<T, RouteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Route.
     * @param {RouteCreateArgs} args - Arguments to create a Route.
     * @example
     * // Create one Route
     * const Route = await prisma.route.create({
     *   data: {
     *     // ... data to create a Route
     *   }
     * })
     * 
     */
    create<T extends RouteCreateArgs>(args: SelectSubset<T, RouteCreateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Routes.
     * @param {RouteCreateManyArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const route = await prisma.route.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteCreateManyArgs>(args?: SelectSubset<T, RouteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Route.
     * @param {RouteDeleteArgs} args - Arguments to delete one Route.
     * @example
     * // Delete one Route
     * const Route = await prisma.route.delete({
     *   where: {
     *     // ... filter to delete one Route
     *   }
     * })
     * 
     */
    delete<T extends RouteDeleteArgs>(args: SelectSubset<T, RouteDeleteArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Route.
     * @param {RouteUpdateArgs} args - Arguments to update one Route.
     * @example
     * // Update one Route
     * const route = await prisma.route.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteUpdateArgs>(args: SelectSubset<T, RouteUpdateArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Routes.
     * @param {RouteDeleteManyArgs} args - Arguments to filter Routes to delete.
     * @example
     * // Delete a few Routes
     * const { count } = await prisma.route.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteDeleteManyArgs>(args?: SelectSubset<T, RouteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routes
     * const route = await prisma.route.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteUpdateManyArgs>(args: SelectSubset<T, RouteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Route.
     * @param {RouteUpsertArgs} args - Arguments to update or create a Route.
     * @example
     * // Update or create a Route
     * const route = await prisma.route.upsert({
     *   create: {
     *     // ... data to create a Route
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Route we want to update
     *   }
     * })
     */
    upsert<T extends RouteUpsertArgs>(args: SelectSubset<T, RouteUpsertArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Routes that matches the filter.
     * @param {RouteFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const route = await prisma.route.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: RouteFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Route.
     * @param {RouteAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const route = await prisma.route.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RouteAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteCountArgs} args - Arguments to filter Routes to count.
     * @example
     * // Count the number of Routes
     * const count = await prisma.route.count({
     *   where: {
     *     // ... the filter for the Routes we want to count
     *   }
     * })
    **/
    count<T extends RouteCountArgs>(
      args?: Subset<T, RouteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteAggregateArgs>(args: Subset<T, RouteAggregateArgs>): Prisma.PrismaPromise<GetRouteAggregateType<T>>

    /**
     * Group by Route.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteGroupByArgs['orderBy'] }
        : { orderBy?: RouteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Route model
   */
  readonly fields: RouteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Route.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    RouteDriver<T extends Route$RouteDriverArgs<ExtArgs> = {}>(args?: Subset<T, Route$RouteDriverArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Route model
   */ 
  interface RouteFieldRefs {
    readonly id: FieldRef<"Route", 'String'>
    readonly name: FieldRef<"Route", 'String'>
    readonly distance: FieldRef<"Route", 'Float'>
    readonly duration: FieldRef<"Route", 'Float'>
    readonly directions: FieldRef<"Route", 'Json'>
    readonly created_at: FieldRef<"Route", 'DateTime'>
    readonly updated_at: FieldRef<"Route", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Route findUnique
   */
  export type RouteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findUniqueOrThrow
   */
  export type RouteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route findFirst
   */
  export type RouteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findFirstOrThrow
   */
  export type RouteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Route to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Routes.
     */
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route findMany
   */
  export type RouteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter, which Routes to fetch.
     */
    where?: RouteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Routes to fetch.
     */
    orderBy?: RouteOrderByWithRelationInput | RouteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Routes.
     */
    cursor?: RouteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Routes.
     */
    skip?: number
    distinct?: RouteScalarFieldEnum | RouteScalarFieldEnum[]
  }

  /**
   * Route create
   */
  export type RouteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to create a Route.
     */
    data: XOR<RouteCreateInput, RouteUncheckedCreateInput>
  }

  /**
   * Route createMany
   */
  export type RouteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Routes.
     */
    data: RouteCreateManyInput | RouteCreateManyInput[]
  }

  /**
   * Route update
   */
  export type RouteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The data needed to update a Route.
     */
    data: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
    /**
     * Choose, which Route to update.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route updateMany
   */
  export type RouteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Routes.
     */
    data: XOR<RouteUpdateManyMutationInput, RouteUncheckedUpdateManyInput>
    /**
     * Filter which Routes to update
     */
    where?: RouteWhereInput
  }

  /**
   * Route upsert
   */
  export type RouteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * The filter to search for the Route to update in case it exists.
     */
    where: RouteWhereUniqueInput
    /**
     * In case the Route found by the `where` argument doesn't exist, create a new Route with this data.
     */
    create: XOR<RouteCreateInput, RouteUncheckedCreateInput>
    /**
     * In case the Route was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteUpdateInput, RouteUncheckedUpdateInput>
  }

  /**
   * Route delete
   */
  export type RouteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
    /**
     * Filter which Route to delete.
     */
    where: RouteWhereUniqueInput
  }

  /**
   * Route deleteMany
   */
  export type RouteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Routes to delete
     */
    where?: RouteWhereInput
  }

  /**
   * Route findRaw
   */
  export type RouteFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Route aggregateRaw
   */
  export type RouteAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Route.RouteDriver
   */
  export type Route$RouteDriverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    where?: RouteDriverWhereInput
  }

  /**
   * Route without action
   */
  export type RouteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Route
     */
    select?: RouteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteInclude<ExtArgs> | null
  }


  /**
   * Model RouteDriver
   */

  export type AggregateRouteDriver = {
    _count: RouteDriverCountAggregateOutputType | null
    _min: RouteDriverMinAggregateOutputType | null
    _max: RouteDriverMaxAggregateOutputType | null
  }

  export type RouteDriverMinAggregateOutputType = {
    id: string | null
    route_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RouteDriverMaxAggregateOutputType = {
    id: string | null
    route_id: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type RouteDriverCountAggregateOutputType = {
    id: number
    route_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type RouteDriverMinAggregateInputType = {
    id?: true
    route_id?: true
    created_at?: true
    updated_at?: true
  }

  export type RouteDriverMaxAggregateInputType = {
    id?: true
    route_id?: true
    created_at?: true
    updated_at?: true
  }

  export type RouteDriverCountAggregateInputType = {
    id?: true
    route_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type RouteDriverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteDriver to aggregate.
     */
    where?: RouteDriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteDrivers to fetch.
     */
    orderBy?: RouteDriverOrderByWithRelationInput | RouteDriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RouteDriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteDrivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteDrivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RouteDrivers
    **/
    _count?: true | RouteDriverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RouteDriverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RouteDriverMaxAggregateInputType
  }

  export type GetRouteDriverAggregateType<T extends RouteDriverAggregateArgs> = {
        [P in keyof T & keyof AggregateRouteDriver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRouteDriver[P]>
      : GetScalarType<T[P], AggregateRouteDriver[P]>
  }




  export type RouteDriverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RouteDriverWhereInput
    orderBy?: RouteDriverOrderByWithAggregationInput | RouteDriverOrderByWithAggregationInput[]
    by: RouteDriverScalarFieldEnum[] | RouteDriverScalarFieldEnum
    having?: RouteDriverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RouteDriverCountAggregateInputType | true
    _min?: RouteDriverMinAggregateInputType
    _max?: RouteDriverMaxAggregateInputType
  }

  export type RouteDriverGroupByOutputType = {
    id: string
    route_id: string
    created_at: Date
    updated_at: Date
    _count: RouteDriverCountAggregateOutputType | null
    _min: RouteDriverMinAggregateOutputType | null
    _max: RouteDriverMaxAggregateOutputType | null
  }

  type GetRouteDriverGroupByPayload<T extends RouteDriverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RouteDriverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RouteDriverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RouteDriverGroupByOutputType[P]>
            : GetScalarType<T[P], RouteDriverGroupByOutputType[P]>
        }
      >
    >


  export type RouteDriverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    route_id?: boolean
    points?: boolean | PointDefaultArgs<ExtArgs>
    created_at?: boolean
    updated_at?: boolean
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routeDriver"]>


  export type RouteDriverSelectScalar = {
    id?: boolean
    route_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type RouteDriverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | RouteDefaultArgs<ExtArgs>
  }

  export type $RouteDriverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RouteDriver"
    objects: {
      route: Prisma.$RoutePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      route_id: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["routeDriver"]>
    composites: {
      points: Prisma.$PointPayload[]
    }
  }

  type RouteDriverGetPayload<S extends boolean | null | undefined | RouteDriverDefaultArgs> = $Result.GetResult<Prisma.$RouteDriverPayload, S>

  type RouteDriverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RouteDriverFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RouteDriverCountAggregateInputType | true
    }

  export interface RouteDriverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RouteDriver'], meta: { name: 'RouteDriver' } }
    /**
     * Find zero or one RouteDriver that matches the filter.
     * @param {RouteDriverFindUniqueArgs} args - Arguments to find a RouteDriver
     * @example
     * // Get one RouteDriver
     * const routeDriver = await prisma.routeDriver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RouteDriverFindUniqueArgs>(args: SelectSubset<T, RouteDriverFindUniqueArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RouteDriver that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RouteDriverFindUniqueOrThrowArgs} args - Arguments to find a RouteDriver
     * @example
     * // Get one RouteDriver
     * const routeDriver = await prisma.routeDriver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RouteDriverFindUniqueOrThrowArgs>(args: SelectSubset<T, RouteDriverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RouteDriver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverFindFirstArgs} args - Arguments to find a RouteDriver
     * @example
     * // Get one RouteDriver
     * const routeDriver = await prisma.routeDriver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RouteDriverFindFirstArgs>(args?: SelectSubset<T, RouteDriverFindFirstArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RouteDriver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverFindFirstOrThrowArgs} args - Arguments to find a RouteDriver
     * @example
     * // Get one RouteDriver
     * const routeDriver = await prisma.routeDriver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RouteDriverFindFirstOrThrowArgs>(args?: SelectSubset<T, RouteDriverFindFirstOrThrowArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RouteDrivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RouteDrivers
     * const routeDrivers = await prisma.routeDriver.findMany()
     * 
     * // Get first 10 RouteDrivers
     * const routeDrivers = await prisma.routeDriver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routeDriverWithIdOnly = await prisma.routeDriver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RouteDriverFindManyArgs>(args?: SelectSubset<T, RouteDriverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RouteDriver.
     * @param {RouteDriverCreateArgs} args - Arguments to create a RouteDriver.
     * @example
     * // Create one RouteDriver
     * const RouteDriver = await prisma.routeDriver.create({
     *   data: {
     *     // ... data to create a RouteDriver
     *   }
     * })
     * 
     */
    create<T extends RouteDriverCreateArgs>(args: SelectSubset<T, RouteDriverCreateArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RouteDrivers.
     * @param {RouteDriverCreateManyArgs} args - Arguments to create many RouteDrivers.
     * @example
     * // Create many RouteDrivers
     * const routeDriver = await prisma.routeDriver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RouteDriverCreateManyArgs>(args?: SelectSubset<T, RouteDriverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RouteDriver.
     * @param {RouteDriverDeleteArgs} args - Arguments to delete one RouteDriver.
     * @example
     * // Delete one RouteDriver
     * const RouteDriver = await prisma.routeDriver.delete({
     *   where: {
     *     // ... filter to delete one RouteDriver
     *   }
     * })
     * 
     */
    delete<T extends RouteDriverDeleteArgs>(args: SelectSubset<T, RouteDriverDeleteArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RouteDriver.
     * @param {RouteDriverUpdateArgs} args - Arguments to update one RouteDriver.
     * @example
     * // Update one RouteDriver
     * const routeDriver = await prisma.routeDriver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RouteDriverUpdateArgs>(args: SelectSubset<T, RouteDriverUpdateArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RouteDrivers.
     * @param {RouteDriverDeleteManyArgs} args - Arguments to filter RouteDrivers to delete.
     * @example
     * // Delete a few RouteDrivers
     * const { count } = await prisma.routeDriver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RouteDriverDeleteManyArgs>(args?: SelectSubset<T, RouteDriverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RouteDrivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RouteDrivers
     * const routeDriver = await prisma.routeDriver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RouteDriverUpdateManyArgs>(args: SelectSubset<T, RouteDriverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RouteDriver.
     * @param {RouteDriverUpsertArgs} args - Arguments to update or create a RouteDriver.
     * @example
     * // Update or create a RouteDriver
     * const routeDriver = await prisma.routeDriver.upsert({
     *   create: {
     *     // ... data to create a RouteDriver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RouteDriver we want to update
     *   }
     * })
     */
    upsert<T extends RouteDriverUpsertArgs>(args: SelectSubset<T, RouteDriverUpsertArgs<ExtArgs>>): Prisma__RouteDriverClient<$Result.GetResult<Prisma.$RouteDriverPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more RouteDrivers that matches the filter.
     * @param {RouteDriverFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const routeDriver = await prisma.routeDriver.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: RouteDriverFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RouteDriver.
     * @param {RouteDriverAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const routeDriver = await prisma.routeDriver.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RouteDriverAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RouteDrivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverCountArgs} args - Arguments to filter RouteDrivers to count.
     * @example
     * // Count the number of RouteDrivers
     * const count = await prisma.routeDriver.count({
     *   where: {
     *     // ... the filter for the RouteDrivers we want to count
     *   }
     * })
    **/
    count<T extends RouteDriverCountArgs>(
      args?: Subset<T, RouteDriverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RouteDriverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RouteDriver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RouteDriverAggregateArgs>(args: Subset<T, RouteDriverAggregateArgs>): Prisma.PrismaPromise<GetRouteDriverAggregateType<T>>

    /**
     * Group by RouteDriver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RouteDriverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RouteDriverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RouteDriverGroupByArgs['orderBy'] }
        : { orderBy?: RouteDriverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RouteDriverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRouteDriverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RouteDriver model
   */
  readonly fields: RouteDriverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RouteDriver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RouteDriverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    route<T extends RouteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RouteDefaultArgs<ExtArgs>>): Prisma__RouteClient<$Result.GetResult<Prisma.$RoutePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RouteDriver model
   */ 
  interface RouteDriverFieldRefs {
    readonly id: FieldRef<"RouteDriver", 'String'>
    readonly route_id: FieldRef<"RouteDriver", 'String'>
    readonly created_at: FieldRef<"RouteDriver", 'DateTime'>
    readonly updated_at: FieldRef<"RouteDriver", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RouteDriver findUnique
   */
  export type RouteDriverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter, which RouteDriver to fetch.
     */
    where: RouteDriverWhereUniqueInput
  }

  /**
   * RouteDriver findUniqueOrThrow
   */
  export type RouteDriverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter, which RouteDriver to fetch.
     */
    where: RouteDriverWhereUniqueInput
  }

  /**
   * RouteDriver findFirst
   */
  export type RouteDriverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter, which RouteDriver to fetch.
     */
    where?: RouteDriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteDrivers to fetch.
     */
    orderBy?: RouteDriverOrderByWithRelationInput | RouteDriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteDrivers.
     */
    cursor?: RouteDriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteDrivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteDrivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteDrivers.
     */
    distinct?: RouteDriverScalarFieldEnum | RouteDriverScalarFieldEnum[]
  }

  /**
   * RouteDriver findFirstOrThrow
   */
  export type RouteDriverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter, which RouteDriver to fetch.
     */
    where?: RouteDriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteDrivers to fetch.
     */
    orderBy?: RouteDriverOrderByWithRelationInput | RouteDriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RouteDrivers.
     */
    cursor?: RouteDriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteDrivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteDrivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RouteDrivers.
     */
    distinct?: RouteDriverScalarFieldEnum | RouteDriverScalarFieldEnum[]
  }

  /**
   * RouteDriver findMany
   */
  export type RouteDriverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter, which RouteDrivers to fetch.
     */
    where?: RouteDriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RouteDrivers to fetch.
     */
    orderBy?: RouteDriverOrderByWithRelationInput | RouteDriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RouteDrivers.
     */
    cursor?: RouteDriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RouteDrivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RouteDrivers.
     */
    skip?: number
    distinct?: RouteDriverScalarFieldEnum | RouteDriverScalarFieldEnum[]
  }

  /**
   * RouteDriver create
   */
  export type RouteDriverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * The data needed to create a RouteDriver.
     */
    data: XOR<RouteDriverCreateInput, RouteDriverUncheckedCreateInput>
  }

  /**
   * RouteDriver createMany
   */
  export type RouteDriverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RouteDrivers.
     */
    data: RouteDriverCreateManyInput | RouteDriverCreateManyInput[]
  }

  /**
   * RouteDriver update
   */
  export type RouteDriverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * The data needed to update a RouteDriver.
     */
    data: XOR<RouteDriverUpdateInput, RouteDriverUncheckedUpdateInput>
    /**
     * Choose, which RouteDriver to update.
     */
    where: RouteDriverWhereUniqueInput
  }

  /**
   * RouteDriver updateMany
   */
  export type RouteDriverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RouteDrivers.
     */
    data: XOR<RouteDriverUpdateManyMutationInput, RouteDriverUncheckedUpdateManyInput>
    /**
     * Filter which RouteDrivers to update
     */
    where?: RouteDriverWhereInput
  }

  /**
   * RouteDriver upsert
   */
  export type RouteDriverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * The filter to search for the RouteDriver to update in case it exists.
     */
    where: RouteDriverWhereUniqueInput
    /**
     * In case the RouteDriver found by the `where` argument doesn't exist, create a new RouteDriver with this data.
     */
    create: XOR<RouteDriverCreateInput, RouteDriverUncheckedCreateInput>
    /**
     * In case the RouteDriver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RouteDriverUpdateInput, RouteDriverUncheckedUpdateInput>
  }

  /**
   * RouteDriver delete
   */
  export type RouteDriverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
    /**
     * Filter which RouteDriver to delete.
     */
    where: RouteDriverWhereUniqueInput
  }

  /**
   * RouteDriver deleteMany
   */
  export type RouteDriverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RouteDrivers to delete
     */
    where?: RouteDriverWhereInput
  }

  /**
   * RouteDriver findRaw
   */
  export type RouteDriverFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RouteDriver aggregateRaw
   */
  export type RouteDriverAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RouteDriver without action
   */
  export type RouteDriverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RouteDriver
     */
    select?: RouteDriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RouteDriverInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const RouteScalarFieldEnum: {
    id: 'id',
    name: 'name',
    distance: 'distance',
    duration: 'duration',
    directions: 'directions',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type RouteScalarFieldEnum = (typeof RouteScalarFieldEnum)[keyof typeof RouteScalarFieldEnum]


  export const RouteDriverScalarFieldEnum: {
    id: 'id',
    route_id: 'route_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type RouteDriverScalarFieldEnum = (typeof RouteDriverScalarFieldEnum)[keyof typeof RouteDriverScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type RouteWhereInput = {
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    id?: StringFilter<"Route"> | string
    name?: StringFilter<"Route"> | string
    source?: XOR<PlaceCompositeFilter, PlaceObjectEqualityInput>
    destination?: XOR<PlaceCompositeFilter, PlaceObjectEqualityInput>
    distance?: FloatFilter<"Route"> | number
    duration?: FloatFilter<"Route"> | number
    directions?: JsonFilter<"Route">
    created_at?: DateTimeFilter<"Route"> | Date | string
    updated_at?: DateTimeFilter<"Route"> | Date | string
    RouteDriver?: XOR<RouteDriverNullableScalarRelationFilter, RouteDriverWhereInput> | null
  }

  export type RouteOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    source?: PlaceOrderByInput
    destination?: PlaceOrderByInput
    distance?: SortOrder
    duration?: SortOrder
    directions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    RouteDriver?: RouteDriverOrderByWithRelationInput
  }

  export type RouteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RouteWhereInput | RouteWhereInput[]
    OR?: RouteWhereInput[]
    NOT?: RouteWhereInput | RouteWhereInput[]
    name?: StringFilter<"Route"> | string
    source?: XOR<PlaceCompositeFilter, PlaceObjectEqualityInput>
    destination?: XOR<PlaceCompositeFilter, PlaceObjectEqualityInput>
    distance?: FloatFilter<"Route"> | number
    duration?: FloatFilter<"Route"> | number
    directions?: JsonFilter<"Route">
    created_at?: DateTimeFilter<"Route"> | Date | string
    updated_at?: DateTimeFilter<"Route"> | Date | string
    RouteDriver?: XOR<RouteDriverNullableScalarRelationFilter, RouteDriverWhereInput> | null
  }, "id">

  export type RouteOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    directions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: RouteCountOrderByAggregateInput
    _avg?: RouteAvgOrderByAggregateInput
    _max?: RouteMaxOrderByAggregateInput
    _min?: RouteMinOrderByAggregateInput
    _sum?: RouteSumOrderByAggregateInput
  }

  export type RouteScalarWhereWithAggregatesInput = {
    AND?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    OR?: RouteScalarWhereWithAggregatesInput[]
    NOT?: RouteScalarWhereWithAggregatesInput | RouteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Route"> | string
    name?: StringWithAggregatesFilter<"Route"> | string
    distance?: FloatWithAggregatesFilter<"Route"> | number
    duration?: FloatWithAggregatesFilter<"Route"> | number
    directions?: JsonWithAggregatesFilter<"Route">
    created_at?: DateTimeWithAggregatesFilter<"Route"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Route"> | Date | string
  }

  export type RouteDriverWhereInput = {
    AND?: RouteDriverWhereInput | RouteDriverWhereInput[]
    OR?: RouteDriverWhereInput[]
    NOT?: RouteDriverWhereInput | RouteDriverWhereInput[]
    id?: StringFilter<"RouteDriver"> | string
    route_id?: StringFilter<"RouteDriver"> | string
    points?: PointCompositeListFilter | PointObjectEqualityInput[]
    created_at?: DateTimeFilter<"RouteDriver"> | Date | string
    updated_at?: DateTimeFilter<"RouteDriver"> | Date | string
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
  }

  export type RouteDriverOrderByWithRelationInput = {
    id?: SortOrder
    route_id?: SortOrder
    points?: PointOrderByCompositeAggregateInput
    created_at?: SortOrder
    updated_at?: SortOrder
    route?: RouteOrderByWithRelationInput
  }

  export type RouteDriverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    route_id?: string
    AND?: RouteDriverWhereInput | RouteDriverWhereInput[]
    OR?: RouteDriverWhereInput[]
    NOT?: RouteDriverWhereInput | RouteDriverWhereInput[]
    points?: PointCompositeListFilter | PointObjectEqualityInput[]
    created_at?: DateTimeFilter<"RouteDriver"> | Date | string
    updated_at?: DateTimeFilter<"RouteDriver"> | Date | string
    route?: XOR<RouteScalarRelationFilter, RouteWhereInput>
  }, "id" | "route_id">

  export type RouteDriverOrderByWithAggregationInput = {
    id?: SortOrder
    route_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: RouteDriverCountOrderByAggregateInput
    _max?: RouteDriverMaxOrderByAggregateInput
    _min?: RouteDriverMinOrderByAggregateInput
  }

  export type RouteDriverScalarWhereWithAggregatesInput = {
    AND?: RouteDriverScalarWhereWithAggregatesInput | RouteDriverScalarWhereWithAggregatesInput[]
    OR?: RouteDriverScalarWhereWithAggregatesInput[]
    NOT?: RouteDriverScalarWhereWithAggregatesInput | RouteDriverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RouteDriver"> | string
    route_id?: StringWithAggregatesFilter<"RouteDriver"> | string
    created_at?: DateTimeWithAggregatesFilter<"RouteDriver"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"RouteDriver"> | Date | string
  }

  export type RouteCreateInput = {
    id?: string
    name: string
    source: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    destination: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    distance: number
    duration: number
    directions: InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    RouteDriver?: RouteDriverCreateNestedOneWithoutRouteInput
  }

  export type RouteUncheckedCreateInput = {
    id?: string
    name: string
    source: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    destination: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    distance: number
    duration: number
    directions: InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    RouteDriver?: RouteDriverUncheckedCreateNestedOneWithoutRouteInput
  }

  export type RouteUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RouteDriver?: RouteDriverUpdateOneWithoutRouteNestedInput
  }

  export type RouteUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    RouteDriver?: RouteDriverUncheckedUpdateOneWithoutRouteNestedInput
  }

  export type RouteCreateManyInput = {
    id?: string
    name: string
    source: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    destination: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    distance: number
    duration: number
    directions: InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteDriverCreateInput = {
    id?: string
    points?: XOR<PointListCreateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: Date | string
    updated_at?: Date | string
    route: RouteCreateNestedOneWithoutRouteDriverInput
  }

  export type RouteDriverUncheckedCreateInput = {
    id?: string
    route_id: string
    points?: XOR<PointListCreateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteDriverUpdateInput = {
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    route?: RouteUpdateOneRequiredWithoutRouteDriverNestedInput
  }

  export type RouteDriverUncheckedUpdateInput = {
    route_id?: StringFieldUpdateOperationsInput | string
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteDriverCreateManyInput = {
    id?: string
    route_id: string
    points?: XOR<PointListCreateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteDriverUpdateManyMutationInput = {
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteDriverUncheckedUpdateManyInput = {
    route_id?: StringFieldUpdateOperationsInput | string
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PlaceCompositeFilter = {
    equals?: PlaceObjectEqualityInput
    is?: PlaceWhereInput
    isNot?: PlaceWhereInput
  }

  export type PlaceObjectEqualityInput = {
    name: string
    location: CoordObjectEqualityInput
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RouteDriverNullableScalarRelationFilter = {
    is?: RouteDriverWhereInput | null
    isNot?: RouteDriverWhereInput | null
  }

  export type PlaceOrderByInput = {
    name?: SortOrder
    location?: CoordOrderByInput
  }

  export type RouteCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    directions?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type RouteAvgOrderByAggregateInput = {
    distance?: SortOrder
    duration?: SortOrder
  }

  export type RouteMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type RouteMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type RouteSumOrderByAggregateInput = {
    distance?: SortOrder
    duration?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PointCompositeListFilter = {
    equals?: PointObjectEqualityInput[]
    every?: PointWhereInput
    some?: PointWhereInput
    none?: PointWhereInput
    isEmpty?: boolean
    isSet?: boolean
  }

  export type PointObjectEqualityInput = {
    location: CoordObjectEqualityInput
    created_at: Date | string
  }

  export type RouteScalarRelationFilter = {
    is?: RouteWhereInput
    isNot?: RouteWhereInput
  }

  export type PointOrderByCompositeAggregateInput = {
    _count?: SortOrder
  }

  export type RouteDriverCountOrderByAggregateInput = {
    id?: SortOrder
    route_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type RouteDriverMaxOrderByAggregateInput = {
    id?: SortOrder
    route_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type RouteDriverMinOrderByAggregateInput = {
    id?: SortOrder
    route_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PlaceCreateEnvelopeInput = {
    set?: PlaceCreateInput
  }

  export type PlaceCreateInput = {
    name: string
    location: CoordCreateInput
  }

  export type RouteDriverCreateNestedOneWithoutRouteInput = {
    create?: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
    connectOrCreate?: RouteDriverCreateOrConnectWithoutRouteInput
    connect?: RouteDriverWhereUniqueInput
  }

  export type RouteDriverUncheckedCreateNestedOneWithoutRouteInput = {
    create?: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
    connectOrCreate?: RouteDriverCreateOrConnectWithoutRouteInput
    connect?: RouteDriverWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PlaceUpdateEnvelopeInput = {
    set?: PlaceCreateInput
    update?: PlaceUpdateInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RouteDriverUpdateOneWithoutRouteNestedInput = {
    create?: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
    connectOrCreate?: RouteDriverCreateOrConnectWithoutRouteInput
    upsert?: RouteDriverUpsertWithoutRouteInput
    disconnect?: RouteDriverWhereInput | boolean
    delete?: RouteDriverWhereInput | boolean
    connect?: RouteDriverWhereUniqueInput
    update?: XOR<XOR<RouteDriverUpdateToOneWithWhereWithoutRouteInput, RouteDriverUpdateWithoutRouteInput>, RouteDriverUncheckedUpdateWithoutRouteInput>
  }

  export type RouteDriverUncheckedUpdateOneWithoutRouteNestedInput = {
    create?: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
    connectOrCreate?: RouteDriverCreateOrConnectWithoutRouteInput
    upsert?: RouteDriverUpsertWithoutRouteInput
    disconnect?: RouteDriverWhereInput | boolean
    delete?: RouteDriverWhereInput | boolean
    connect?: RouteDriverWhereUniqueInput
    update?: XOR<XOR<RouteDriverUpdateToOneWithWhereWithoutRouteInput, RouteDriverUpdateWithoutRouteInput>, RouteDriverUncheckedUpdateWithoutRouteInput>
  }

  export type PointListCreateEnvelopeInput = {
    set?: PointCreateInput | PointCreateInput[]
  }

  export type PointCreateInput = {
    location: CoordCreateInput
    created_at?: Date | string
  }

  export type RouteCreateNestedOneWithoutRouteDriverInput = {
    create?: XOR<RouteCreateWithoutRouteDriverInput, RouteUncheckedCreateWithoutRouteDriverInput>
    connectOrCreate?: RouteCreateOrConnectWithoutRouteDriverInput
    connect?: RouteWhereUniqueInput
  }

  export type PointListUpdateEnvelopeInput = {
    set?: PointCreateInput | PointCreateInput[]
    push?: PointCreateInput | PointCreateInput[]
    updateMany?: PointUpdateManyInput
    deleteMany?: PointDeleteManyInput
  }

  export type RouteUpdateOneRequiredWithoutRouteDriverNestedInput = {
    create?: XOR<RouteCreateWithoutRouteDriverInput, RouteUncheckedCreateWithoutRouteDriverInput>
    connectOrCreate?: RouteCreateOrConnectWithoutRouteDriverInput
    upsert?: RouteUpsertWithoutRouteDriverInput
    connect?: RouteWhereUniqueInput
    update?: XOR<XOR<RouteUpdateToOneWithWhereWithoutRouteDriverInput, RouteUpdateWithoutRouteDriverInput>, RouteUncheckedUpdateWithoutRouteDriverInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PlaceWhereInput = {
    AND?: PlaceWhereInput | PlaceWhereInput[]
    OR?: PlaceWhereInput[]
    NOT?: PlaceWhereInput | PlaceWhereInput[]
    name?: StringFilter<"Place"> | string
    location?: XOR<CoordCompositeFilter, CoordObjectEqualityInput>
  }

  export type CoordObjectEqualityInput = {
    lat: number
    lng: number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CoordOrderByInput = {
    lat?: SortOrder
    lng?: SortOrder
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PointWhereInput = {
    AND?: PointWhereInput | PointWhereInput[]
    OR?: PointWhereInput[]
    NOT?: PointWhereInput | PointWhereInput[]
    location?: XOR<CoordCompositeFilter, CoordObjectEqualityInput>
    created_at?: DateTimeFilter<"Point"> | Date | string
  }

  export type CoordCreateInput = {
    lat: number
    lng: number
  }

  export type RouteDriverCreateWithoutRouteInput = {
    id?: string
    points?: XOR<PointListCreateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteDriverUncheckedCreateWithoutRouteInput = {
    id?: string
    points?: XOR<PointListCreateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteDriverCreateOrConnectWithoutRouteInput = {
    where: RouteDriverWhereUniqueInput
    create: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
  }

  export type PlaceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: XOR<CoordUpdateEnvelopeInput, CoordCreateInput>
  }

  export type RouteDriverUpsertWithoutRouteInput = {
    update: XOR<RouteDriverUpdateWithoutRouteInput, RouteDriverUncheckedUpdateWithoutRouteInput>
    create: XOR<RouteDriverCreateWithoutRouteInput, RouteDriverUncheckedCreateWithoutRouteInput>
    where?: RouteDriverWhereInput
  }

  export type RouteDriverUpdateToOneWithWhereWithoutRouteInput = {
    where?: RouteDriverWhereInput
    data: XOR<RouteDriverUpdateWithoutRouteInput, RouteDriverUncheckedUpdateWithoutRouteInput>
  }

  export type RouteDriverUpdateWithoutRouteInput = {
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteDriverUncheckedUpdateWithoutRouteInput = {
    points?: XOR<PointListUpdateEnvelopeInput, PointCreateInput> | PointCreateInput[]
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteCreateWithoutRouteDriverInput = {
    id?: string
    name: string
    source: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    destination: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    distance: number
    duration: number
    directions: InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteUncheckedCreateWithoutRouteDriverInput = {
    id?: string
    name: string
    source: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    destination: XOR<PlaceCreateEnvelopeInput, PlaceCreateInput>
    distance: number
    duration: number
    directions: InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type RouteCreateOrConnectWithoutRouteDriverInput = {
    where: RouteWhereUniqueInput
    create: XOR<RouteCreateWithoutRouteDriverInput, RouteUncheckedCreateWithoutRouteDriverInput>
  }

  export type PointUpdateManyInput = {
    where: PointWhereInput
    data: PointUpdateInput
  }

  export type PointDeleteManyInput = {
    where: PointWhereInput
  }

  export type RouteUpsertWithoutRouteDriverInput = {
    update: XOR<RouteUpdateWithoutRouteDriverInput, RouteUncheckedUpdateWithoutRouteDriverInput>
    create: XOR<RouteCreateWithoutRouteDriverInput, RouteUncheckedCreateWithoutRouteDriverInput>
    where?: RouteWhereInput
  }

  export type RouteUpdateToOneWithWhereWithoutRouteDriverInput = {
    where?: RouteWhereInput
    data: XOR<RouteUpdateWithoutRouteDriverInput, RouteUncheckedUpdateWithoutRouteDriverInput>
  }

  export type RouteUpdateWithoutRouteDriverInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RouteUncheckedUpdateWithoutRouteDriverInput = {
    name?: StringFieldUpdateOperationsInput | string
    source?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    destination?: XOR<PlaceUpdateEnvelopeInput, PlaceCreateInput>
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    directions?: InputJsonValue | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoordCompositeFilter = {
    equals?: CoordObjectEqualityInput
    is?: CoordWhereInput
    isNot?: CoordWhereInput
  }

  export type CoordUpdateEnvelopeInput = {
    set?: CoordCreateInput
    update?: CoordUpdateInput
  }

  export type PointUpdateInput = {
    location?: XOR<CoordUpdateEnvelopeInput, CoordCreateInput>
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoordWhereInput = {
    AND?: CoordWhereInput | CoordWhereInput[]
    OR?: CoordWhereInput[]
    NOT?: CoordWhereInput | CoordWhereInput[]
    lat?: FloatFilter<"Coord"> | number
    lng?: FloatFilter<"Coord"> | number
  }

  export type CoordUpdateInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}